char* addStrings(char* num1, char* num2) {

    int len1 = strlen(num1);
    int len2 = strlen(num2);
    int maxLen = (len1 > len2 ? len1 : len2) + 1; // +1 for possible carry
    char* result = (char*)malloc(maxLen + 1); // +1 for null terminator
    result[maxLen] = '\0';

    int carry = 0, i = len1 - 1, j = len2 - 1, k = maxLen - 1;

    while (i >= 0 || j >= 0 || carry) {
        int digit1 = (i >= 0) ? num1[i--] - '0' : 0;
        int digit2 = (j >= 0) ? num2[j--] - '0' : 0;
        int sum = digit1 + digit2 + carry;
        result[k--] = (sum % 10) + '0';
        carry = sum / 10;
    }

    // If there's no carry at the beginning, shift the result
    if (k >= 0) {
        memmove(result, result + k + 1, maxLen - k);
    }

    return result;
}
